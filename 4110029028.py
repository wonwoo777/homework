# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MjwyWUJv4v2fSsv8DAAKQVqWS0FNWAHs
"""

pip install matplotlib

# 第一題
import time
import matplotlib.pyplot as plt

# 遞歸方法計算 Fibonacci 數列
def fibonacci_recursive(n):
    if n <= 1:
        return n
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# 動態規劃方法計算 Fibonacci 數列
def fibonacci_bottom_up(n):
    fib = [0, 1]
    for i in range(2, n+1):
        fib.append(fib[i-1] + fib[i-2])
    return fib[n]

# 測量 Fibonacci 計算的執行時間
def measure_execution_time_recursive(n_values):
    execution_times_recursive = []
    for n in n_values:
        start_time = time.time()
        fibonacci_recursive(n)
        execution_times_recursive.append(time.time() - start_time)
    return execution_times_recursive

def measure_execution_time_bottom_up(n_values):
    execution_times_bottom_up = []
    for n in n_values:
        start_time = time.time()
        fibonacci_bottom_up(n)
        execution_times_bottom_up.append(time.time() - start_time)
    return execution_times_bottom_up

# 繪製圖表
def plot_execution_times(n_values, execution_times_recursive, execution_times_bottom_up):
    plt.figure(figsize=(10, 6))
    plt.plot(n_values, execution_times_recursive, label='Top-down (Recursive)')
    plt.plot(n_values, execution_times_bottom_up, label='Bottom-up (Dynamic Programming)')
    plt.xlabel('n')
    plt.ylabel('Execution Time (seconds)')
    plt.title('Execution Time of Fibonacci Calculation Methods')
    plt.legend()
    plt.grid(True)
    plt.show()

# 測量 F(1) 到 F(100) 的執行時間
n_values = list(range(1, 101))
exec_times_recursive = measure_execution_time_recursive(n_values)
exec_times_bottom_up = measure_execution_time_bottom_up(n_values)
plot_execution_times(n_values, exec_times_recursive, exec_times_bottom_up)

import matplotlib.pyplot as plt

def fibonacci_recursive_with_count(n, count):
  if n ==4:
    count[0] += 1
  if n <= 1:
    return n
  else:
    return fibonacci_recursive_with_count(n-1, count) + fibonacci_recursive_with_count(n-2, count)

# F(4)次數陣列
count_f4 = [0]

# 紀錄計算f(4)次數
for i in range(5, 51):
  count = [0]
  fibonacci_recursive_with_count(i, count)
  count_f4.append(count[0])

# 設置x軸的數值，從5到50
x_values = list(range(5, 51))

#繪製計算F(4)次數的折線圖
plt.plot(x_values, count_f4, label='Number of Overlapping Computations for F(4)')
plt.xlabel('n')
plt.ylabel('Count of F(4)')
plt.title('Count of F(4) during calculation of F(5) to F(50)')
plt.legend()

plt.show()